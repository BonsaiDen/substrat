{"name":"Substrat","tagline":"Simple, automatic build system for single page web applications. ","body":"# Substrat - Relax your build ![Build Status](https://api.travis-ci.org/BonsaiDen/substrat.png)\r\n\r\n**Substrat** is a powerful yet simple build system for HTML5 projects. \r\n\r\nIt's easy and quick to set up, configurable, extendable and built with for \r\nfrontend heavy, single page applications.\r\n\r\n![npm Details](https://nodei.co/npm/substrat.png)\r\n\r\n\r\n## Features\r\n\r\n- Automatic monitoring and syncing our source and build directories\r\n- Supports complex [file patterns](#patterns) for file filtering and ordering\r\n- Has task dependencies to re-build files when other files are changed (based on patterns)\r\n- Built in static web server with support for automatic page reload on each build \r\n- Comes with many built-in tasks for things like:\r\n\r\n    - JS Minification (using [UglifyJS](https://github.com/mishoo/UglifyJS2))\r\n    - Stylesheet compilation (using [lesscss](https://github.com/less/less.js))\r\n    - HTML Templating (using [Jade](https://github.com/visionmedia/jade))\r\n    - Markdown to HTML (using [markdown-js](https://github.com/evilstreak/markdown-js))\r\n    - Generating files from templates (using [mustache.js](https://github.com/janl/mustache.js))\r\n    - Dynamic file generation (using your custom functions)\r\n\r\n- Easily set up proxies:\r\n\r\n    - Avoid CORS configuration and other issues during local development\r\n    - Proxy a directory and easily inject mocks for your tests\r\n    - Add delays to all requests in order to simulate bad networks\r\n\r\n- Is easy to extend with your own, custom tasks\r\n- Completely generic, can be used with (e.g. [Grunt](http://gruntjs.com), [Jake](https://github.com/mde/jake) or any other task runner or in a standlone script)\r\n\r\n\r\n## Usage\r\n\r\n1. Get it via `npm install substrat`\r\n    \r\n    ```javascript\r\n    var substrat = require('substrat');\r\n    ```\r\n\r\n2. Setup your patterns, these allow you to group and filter the files for your build\r\n\r\n    ```javascript\r\n    var patterns = {\r\n\r\n        js: {\r\n            // Match all source files of the application, and put app and config\r\n            // at the end when generating a array of the filenames from this pattern\r\n            app: substrat.pattern(/js\\/.*\\.js$/).last('js/config.js', 'js/app.js'),\r\n\r\n            // Match all the javascript source files of the libraries, but ignore any pre-minified ones\r\n            lib: substrat.pattern(/lib\\/.*\\.js$/).not(/\\.min\\.js$/)\r\n        },\r\n\r\n        compile: {\r\n            jade: substrat.pattern(/\\.jade$/),\r\n            less: substrat.pattern(/\\.less$/)\r\n        },\r\n\r\n        // Match all style sheets both generated and existing ones\r\n        // but put the generated ones at the end when generating a array of the\r\n        // filenames from this pattern\r\n        style: substrat.pattern(/(\\.css|\\.less)$/).last(/\\.less$/),\r\n\r\n        // A matcher for everything else\r\n        all: substrat.pattern('*')\r\n\r\n    };\r\n    ```\r\n\r\n3. Define an environment for the use in your templates, you can also expose the patterns so you can include all your scripts and styles automatically\r\n\r\n    ```javascript\r\n    var env = {\r\n        title: 'Substrat',\r\n        version: 0.1,\r\n        patterns: patterns // Expose the patterns for later usage\r\n    };\r\n    ```\r\n\r\n4. Create a new instance of substrat with your specific configuration\r\n\r\n    ```javascript\r\n    var s = substrat.init({\r\n\r\n        // The source directory to watch\r\n        src: 'src',\r\n\r\n        // The destination directory for the build\r\n        dest: 'public',\r\n\r\n        // Whether or not to log build events, will still print general info\r\n        silent: false,\r\n        \r\n        // Will disable all logging (sets silent to true)\r\n        quiet: false,\r\n\r\n        // If true, will produce lots of internal logging output\r\n        debug: false,\r\n\r\n        // Enable compression in tasks (e.g. strip whitespace, minify js etc.)\r\n        compress: false,\r\n\r\n        // Set up dependencies\r\n        depends: [\r\n            // Rebuild src/index.jade every time a js or less file changes\r\n            // This way, the template can automatically update the included\r\n            // scripts and styles\r\n            ['index.jade', [patterns.js, patterns.style]]\r\n        ],\r\n        \r\n        // Define the tasks\r\n        // Tasks are run in order, each task will filter out the files it matched\r\n        // so they are not subject to any further tasks in the chain\r\n        tasks: [\r\n        \r\n            // Compile all app specific scripts with uglify-js\r\n            substrat.task.compile(patterns.js.app, 'js'),\r\n\r\n            // Compile all jade files to html and supply them with the locals from \"env\"\r\n            substrat.task.compile(patterns.compile.jade, 'jade', env),\r\n\r\n            // Compile all less stylesheets to css\r\n            substrat.task.compile(patterns.compile.less, 'less'),\r\n\r\n            // Copy all other files which did not match any previous tasks\r\n            substrat.task.copy(patterns.all)\r\n        \r\n        ],\r\n\r\n        // Setup some proxies for testing and local database access\r\n        proxy: {\r\n\r\n            // Proxy the local couchdb instance to avoid messy CORS setup during \r\n            // development\r\n            '/couchdb': {\r\n\r\n                // URL is the target of the proxy\r\n                host: 'localhost',\r\n                port: 5984,\r\n\r\n                // Add 500 milliseconds of delay to each request\r\n                delay: 500\r\n\r\n            },\r\n\r\n            // Proxy the \"public\" directory itself but \"mock\" out a couple of\r\n            // files to inject test mocks / frameworks\r\n            '/test': {\r\n\r\n                // The directory to serve \r\n                root: 'public',\r\n\r\n                // Replace the main application file and include additional files \r\n                // for testing\r\n                mock: {\r\n                    'js/app.js': [\r\n                        'test/e2e/app.js',\r\n                        'test/e2e/mocks.js'\r\n                    ]\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        \r\n    });\r\n    ```\r\n\r\n5. Start your continous build that automatically reloads your browser while you're editing\r\n\r\n    ```javascript\r\n    s.listen(4444);\r\n    ```\r\n\r\nRead on for more details on the configuration options and tasks.\r\n\r\n\r\n## Configuration Options\r\n\r\n- `src`: *String*\r\n    \r\n    The source directory which contains the file to build.\r\n\r\n- `dest`: *String*\r\n\r\n    The destination directory were the files produced by the build are to be found.\r\n\r\n    The contents of the directory are automatically synced with the source, \r\n    meaning that files and folders which no longer exist in the source directory \r\n    will automatically be removed.\r\n\r\n- `silent`: *Boolean (false)*\r\n\r\n    If `true` disables substrat logging (except for top level logs).\r\n\r\n- `quiet`: *Boolean (false)*\r\n\r\n    If `true` disables **all** substrat logging (enables `silent`).\r\n\r\n- `debug`: *Boolean (false)*\r\n\r\n    If `true` enables internal logging of substrat's components.\r\n\r\n- `hidden`: *Boolean (true)*\r\n\r\n    When `true` substrat will ingore any dotfiles.\r\n\r\n- `compress`: *Boolean(false)*\r\n\r\n    A flag which indicates to tasks that the should compress / minify their \r\n    output.\r\n\r\n    See the [Tasks](#tasks) section for more details.\r\n\r\n- `depends`: *Array[Array[Pattern, Pattern|Array[Patterns]]...]*\r\n\r\n    A array containing arrays of patterns which specify which files should be \r\n    rebuild once other files matching the specified patterns have changed.\r\n\r\n    See the [Dependencies](#dependencies) section for more details.\r\n\r\n- `tasks`: *Array*\r\n\r\n    A listing of tasks which will be executed in order once the contents of the \r\n    `src` directory change. Each successive tasks will filter out the files it \r\n    matched from the list of files that have changed.\r\n\r\n    See the [Tasks](#tasks) section for more details.\r\n\r\n- `proxy`: *Object*\r\n\r\n    A mapping of paths to proxy configurations.\r\n\r\n    See the [Proxies](#proxies) section for more details.\r\n\r\n\r\n## Methods\r\n\r\n- `run()` -> *this*\r\n\r\n    Invokes the build once and then finishes.\r\n\r\n    Will emit the `done` event once the build has finished.\r\n\r\n\r\n- `watch()` -> *this*\r\n\r\n    Will continously monitor the source directory for changed and re-build \r\n    automatically.\r\n\r\n    Triggers a `build` event after each completed build.\r\n\r\n\r\n- `listen(indexUrl, port [, host])` -> *this*\r\n\r\n    Same as `watch()` but will also start a local web server on the specified \r\n    `host` and `port` and will patch the specified `indexUrl` HTML file to \r\n    automatically  reload on every build.\r\n\r\n    To disable automatic reloading, simply pass `null` as the value of `indexUrl`.\r\n\r\n\r\n- `stop()` -> *this*\r\n    \r\n    Stops substrat in case it is watching or listening.\r\n\r\n    Triggers the `done` event.\r\n\r\n\r\n- `pattern(expr)` -> *Pattern*\r\n    \r\n    Creates a new substrat pattern from the given expression.\r\n\r\n\r\n- `files(pattern)` -> *Array[String]*\r\n\r\n    Returns a list of files for the **destination** directory which match the \r\n    specified pattern(s).\r\n\r\n\r\n## Patterns\r\n\r\nSubstrat makes heavy use of patterns for both file matching and listing.\r\n\r\nPatterns can be created from a variety of sources and are converted to regular \r\nexpressions internally. You can also create pass objects of patterns which will \r\nbe merged, as well as arrays which will concatenate their matches.\r\n\r\n> Note: All paths and files within substrat are treated relative to either the \r\n`src` or `dest` directories. E.g. `/home/user/project/src/js/app.js` will be \r\ntreated as `js/app.js`.\r\n\r\n\r\n### From Strings\r\n\r\nAll strings parsed via [minimatch](https://github.com/isaacs/minimatch) and \r\nconverted into regular expressions. This means that you can use standard *glob* \r\npatterns like `**/*.js` and the like.\r\n\r\nThe only exception to this rule is the special string `*` which will get \r\nconverted to `/^.*$/`.\r\n\r\n\r\n### From Regular Expressions\r\n\r\nYou can pass any valid regular expression as a pattern.\r\n\r\n\r\n### From Objects\r\n\r\nPatterns from objects are merged, they object's keys are sorted via the standard \r\n`sort()` function and are then used to merge the object's values into a new \r\npattern.\r\n\r\n\r\n### From Functions\r\n\r\nFunctions which are passed as pattern will get invoked with the filename they\r\nshould test for matching. They should return either `true` or `false`.\r\n\r\n\r\n### From Arrays\r\n\r\nArrays will create so called *Pattern Groups*. Pattern groups apply all included \r\npatterns in order and will preserve the ordering of the files returned by the\r\nindividual sub patterns.\r\n\r\n\r\n### Ordering\r\n\r\nPatterns have the very useful `pattern.first(patterns...)` and \r\n`pattern.last(patterns...)` methods which will move the files matching the \r\nspecified patterns either to the beginning or the end of the file list. \r\n\r\n```javascript\r\nsubstrat.pattern(/js\\/.*\\.js$/).first('js/config.js').last('js/init.js', 'js/afterInit.js');\r\n```\r\n\r\nFor example, this allows you to get a list of all JavaScript files in your \r\napplication and then put the file that defines your namespaces and configuration \r\nand the beginning\r\nof the list and the file initializing your code at the very end.\r\n    \r\n### Exclusion\r\n\r\nIn addition patterns can include one or more files via the \r\n`pattern.not(pattern...)` method.\r\n\r\n\r\n## Dependencies\r\n\r\nSubstrat includes a minimal - but efficient - dependency management for files \r\nwhich is also based on pattern.\r\n\r\nDependencies are specified in the format of an array with two entries. The first \r\none is a pattern which describes which files will be re-build and the second \r\nentry being a pattern which specifies which files will trigger the re-build.\r\n\r\n```javascript\r\n['index.jade', [/*.js$/, /*.less$/]]\r\n```\r\n\r\nThe above will rebuild `index.jade` every time that a `.js` or `.less` file has \r\nbeen added, changed or removed from the source directory.\r\n\r\nOf course it is also possibly to re-build multiple files, simply supply a more \r\ncomplex pattern as the first entry of the array:\r\n\r\n```javascript\r\n[/template\\/view\\/controller\\/*.jade$/, [/*.js$/, /*.less$/]]\r\n```\r\n\r\n> Note: Every rebuild will trigger another check for dependencies. \r\n> This allows for the creation of dependencies that depend on other dependencies.\r\n\r\n\r\n## Tasks\r\n\r\nTasks in substrat are highly configurable and easy to extend.\r\n\r\n\r\n### Built-in Tasks\r\n\r\n- __Compile__\r\n\r\n    `substrat.task.compile(pattern, compiler[, config])`\r\n\r\n    Compiles all the files matching the `pattern` from the `src` to the `dest` \r\n    using the specified `compiler`. Following compilers are available out of the box:\r\n\r\n    > Note: The compile tasks by will **only** obfuscate and/or minify their \r\n    > output when the `substrat.compress` option is set.\r\n\r\n    - `js`\r\n        \r\n        Compiles JavaScript files using `uglify-js`, if the `substrat.compress` \r\n        option is **enabled**,  otherwise it will simply copy the JS files.\r\n\r\n        __Example: Minifying all applications JS files__\r\n\r\n            substrat.task.compile('js/**/*.js', 'js')\r\n\r\n    - `less`\r\n        \r\n        Compiles `less` files into CSS, changing the file extension in the process.\r\n        If `substrat.compress` is set it will stip whitespace from the output files.\r\n\r\n        __Example: Transforming less files into CSS__\r\n\r\n            substrat.task.compile(/*\\.less$/, 'less')\r\n\r\n    - `jade`\r\n        \r\n        Compiles `jade` files into HTML, changing the file extension in the process.\r\n        The `config` paramter should be an object and will be populate the **locals** \r\n        of the template.\r\n\r\n        __Example: Converting all jade templates into HTML__\r\n\r\n            substrat.task.compile(/*\\.jade$/, 'jade', config)\r\n\r\n\r\n- __Concat__\r\n\r\n    `substrat.task.compile(pattern, type, outputFile)`\r\n\r\n    This task is pretty much the same as `compile` task but only supports `js` \r\n    and `less` at the moment and will merge all the files into the specified \r\n    `outputFile`.\r\n\r\n\r\n- __Copy__\r\n\r\n    `substrat.task.compile(pattern)`\r\n\r\n    Copies all the files matching the `pattern` from the `src` to the `dest` \r\n    directory. This task uses `fs.stream` interally for efficient copying and \r\n    will create directories in the destination as requried.\r\n\r\n    __Example: Copying all outstanding files as the last task__\r\n\r\n        substrat.task.copy('*')\r\n\r\n\r\n- __Template__\r\n\r\n    `substrat.task.template(pattern, locals [, tags])`\r\n\r\n    Compiles all files matching the `pattern` as `mustache.js` templates and \r\n    supplies them with `locals`. The files get rendered to a file with the same \r\n    name in the `dest` directory.\r\n\r\n    The optional`tags` array can be used to replace the default tags used in \r\n    mustache templates with custom ones. e.g. `['<%', '%>']`.\r\n\r\n    __Example: Rendering configuration file with custom tags to keep it JSHint friendly__\r\n\r\n        substrat.task.template('js/config.js', config, ['\"{{', '}}\"']),\r\n\r\n\r\n### Custom Tasks\r\n\r\nNew tasks can be created via the `substrat.Task` constructor:\r\n\r\n    new substrat.Task(taskName, filePattern, handler, config)\r\n\r\n- `taskName`: *String*\r\n    \r\n    This simply is a internal name for the task which is used in debug logging.\r\n\r\n- `filePattern`: *Pattern*\r\n\r\n    A substrat pattern which describes all files for which the task should be \r\n    executed.\r\n\r\n    > Note: A `null` pattern will run the task on every build, not matter which \r\n    > files have changed.\r\n\r\n- `handlerDescription`: *Object*\r\n\r\n    A object which implements the actual logic of the task.\r\n\r\n- `config`: *Object*\r\n\r\n    Additional configuration which is available to the task logic during \r\n    execution.\r\n\r\n\r\n### Task Handler Description\r\n\r\nA task handler description consists of a number of properties and methods:\r\n    \r\n    var handlerDescription = {\r\n\r\n        // Run the task independently for each file\r\n        mode: substrat.Task.Each,\r\n\r\n        // Automatically provide the file data to the task\r\n        data: true,\r\n\r\n        // Map the source files to html files in the output\r\n        map: function(e, file) {\r\n            return file.replace(/\\.jade$/, '.html');\r\n        },\r\n\r\n        // The actual task logic\r\n        run: function(e, done) {\r\n\r\n            try {\r\n\r\n                // Use the custom configuration of the task as the locals\r\n                var locals = util.merge(e.config, {\r\n                    pretty: !e.options.compress,\r\n                    substrat: e.substrat\r\n                });\r\n\r\n                done(null, jade.render(e.data.toString(), locals));\r\n\r\n            } catch(err) {\r\n                done(err);\r\n            }\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n- `mode`: *Integer*\r\n\r\n    One of the following:\r\n\r\n    - `Each`\r\n\r\n        Run the task independently for each file, meaning that for five input \r\n        files the task will be run five times.\r\n\r\n    - `All`\r\n\r\n        Run the task once on all files, meaning that for five input files\r\n        the task will be called exactly one time and will be provided with all \r\n        the files and their data at once.\r\n\r\n    - `Single`\r\n\r\n        Run the task once and don't care about the input. Useful for auto \r\n        generation of files and other things.\r\n\r\n\r\n- `data`: *Boolean|Function(e)*\r\n\r\n    Whether or not to automatically read the input file(s) and supply their \r\n    buffers to the task. Can also be a function which gets passed the [task \r\n    execution environment](#task-execution-environment) and should return a \r\n    `boolean`.\r\n\r\n\r\n- `map`: *Function(e, file)*\r\n\r\n    A function which maps the input filename to the respective outputs, can \r\n    also return an array with multiple output names (e.g. a JS file and its \r\n    corresponding source map file).\r\n\r\n    It's arguments consists of the \r\n    [task execution environment](#task-execution-environment) and the path of \r\n    the file in source directory.\r\n\r\n    These mappings are used to create the output files of the task in the \r\n    destination directory.\r\n    \r\n    In addition, they also server to synchronize the destination directory and \r\n    automatically remove files which are no longer exist in the source.\r\n\r\n    They are also available via `substrat.files(patterns)` and can be used to\r\n    automatically include files in HTML and other templates.\r\n\r\n\r\n- `run`: *Function(e, done(err[, data]))*\r\n\r\n    A function which performs the actual task logic.\r\n\r\n    It's arguments consists of the \r\n    [task execution environment](#task-execution-environment) and a callback \r\n    function.\r\n\r\n    The `done` callback takes the following arguments:\r\n\r\n    - `err`: *Null|Error*\r\n\r\n        The error value in case the task could failed. Pass `null` if the task\r\n        was successful.A\r\n\r\n    - `data`: *String|Array[String]* (Optional)\r\n\r\n        The file data to be written into the files indicated by the return \r\n        value(s) of the handlers `map()` function.\r\n\r\n        If left out, no file be written. This can be used by tasks which handle\r\n        the writing on their own (e.g. the `copy` task which uses streams).\r\n\r\n\r\n### Task Execution Environment\r\n\r\nThis \"environment\" argument is passed to all functions of a task handler \r\ndescription and has the following structure:\r\n\r\n- `options`: *Object*\r\n\r\n    A reference to the configuration object passed into `substrat.init()`.\r\n\r\n- `config`: *Object*\r\n    \r\n    A reference to the configuration object passed into the task constructor.\r\n\r\n- `mapped`: *String|Array[String]*\r\n\r\n    The filename(s) returned by the `map()` function of the task handler.\r\n\r\n    *Only for tasks running with mode `Task.Each` or `Task.All`*\r\n\r\n- `source`: *String*\r\n    \r\n    The filename from the source directory.\r\n\r\n    *Only for tasks running with mode `Task.Each`*\r\n\r\n- `data`: *Buffer*\r\n\r\n    A `Buffer` object with the contents of the file reference by `source`.\r\n\r\n    *Only for tasks running with mode `Task.Each`*\r\n\r\n- `path`: *String*\r\n\r\n    The full path to the file in the source directory.\r\n\r\n    *Only for tasks running with mode `Task.Each`*\r\n\r\n- `all`: *Array[Object]*\r\n    \r\n    A array of objects with `source`, `data` and `path` properties as described \r\n    above.\r\n\r\n    *Only for tasks running with mode `Task.All`*\r\n\r\n\r\n## Proxies\r\n\r\nSubstrat can be used to quickly configure proxies to both http endpoints as well \r\nas local directories, this is done via the `substrat.proxy` option which takes a \r\nmapping of absolute paths to **proxy configuration objects** having the following \r\nstructure:\r\n\r\n- `host`: *String*\r\n\r\n- `port`: *Integer*\r\n\r\n- `delay`: *Integer*\r\n\r\n- `root`: *String*\r\n\r\n- `mock`: *Object*\r\n    \r\n\r\n## Outstanding Features / Fixes\r\n\r\n- Add a grunt task\r\n- Create a repository with a demo/example project\r\n- Add Support for a `Subfile.js`\r\n- Correctly write out source maps for JS and CSS files\r\n\r\n\r\n## License\r\n\r\n**Substrat** is licenses under MIT.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}